name: CI/CD Pipeline

# 워크플로우 트리거 설정
on:
  push:
    branches: [ main ]  # main 브랜치에 푸시될 때
    tags:
      - 'v*'  # v로 시작하는 모든 태그에 대해 워크플로우 실행
  pull_request:
    branches: [ main ]  # main 브랜치로의 PR에 대해
  workflow_dispatch:  # 수동으로 워크플로우를 실행할 수 있게 함

jobs:
  build:
    runs-on: windows-latest  # Windows 환경에서 실행
    
    steps:
    - uses: actions/checkout@v3  # 리포지토리 코드를 체크아웃
      with:
        fetch-depth: 0  # 전체 Git 히스토리를 가져옴 (SonarCloud 분석용)
    
    - name: Setup .NET  # .NET 환경 설정
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'  # .NET 6.0 버전 사용
    
    - name: Cache NuGet packages  # NuGet 패키지 캐싱으로 빌드 속도 향상
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies  # 프로젝트 종속성 복원
      run: dotnet restore
    
    - name: Build  # 프로젝트 빌드
      run: dotnet build --no-restore
    
    - name: Test  # 단위 테스트 실행
      run: dotnet test --no-build --verbosity normal
    
    - name: Publish  # 릴리스 구성으로 프로젝트 게시
      run: dotnet publish src/JH_DataAnalyzer.csproj -c Release -o publish -r win-x64 --self-contained true
    
    - name: Upload artifact  # 빌드 결과물을 아티팩트로 업로드
      uses: actions/upload-artifact@v3
      with:
        name: JH_DataAnalyzer
        path: publish

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build  # build 작업 완료 후 실행
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 전체 Git 히스토리를 가져옴 (SonarCloud 분석용)
    
    - name: SonarCloud Scan  # SonarCloud를 사용한 코드 품질 분석
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: .

  create_release:
    runs-on: ubuntu-latest
    needs: [build, sonarcloud]  # build와 sonarcloud 작업 완료 후 실행
    if: startsWith(github.ref, 'refs/tags/')  # 태그 푸시 시에만 실행
    steps:
    - name: Create Release  # GitHub 릴리스 생성
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

  generate_docs:
    runs-on: ubuntu-latest
    needs: build  # build 작업 완료 후 실행
    permissions:
      contents: write  # GitHub Pages에 배포하기 위한 쓰기 권한
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Doxygen  # Doxygen 설치
      run: sudo apt-get install doxygen -y
    
    - name: Generate Documentation  # Doxygen을 사용하여 문서 생성
      run: |
        doxygen Doxyfile
        if [ ! -f docs/index.html ]; then
          echo '<meta http-equiv="refresh" content="0; url=./html/index.html">' > docs/index.html
        fi
    
    - name: Deploy to GitHub Pages  # 생성된 문서를 GitHub Pages에 배포
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
