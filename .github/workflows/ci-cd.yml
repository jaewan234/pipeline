name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # Windows 환경에서 실행하여 경로 문제 해결
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 전체 Git 히스토리를 가져옴 (SonarCloud 분석용)
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'  # 프로젝트에 맞는 .NET 버전 사용
    
    - name: Clear NuGet cache
      run: dotnet nuget locals all --clear
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test with coverage
      run: dotnet test --configuration Release --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

  sonarcloud:
    needs: build
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Install SonarCloud scanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Remove sonar-project.properties
      run: Remove-Item -Path sonar-project.properties -ErrorAction SilentlyContinue

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      # SonarScanner 실행 및 분석
      run: |
        dotnet sonarscanner begin /k:"jaewan234_pipeline" /o:"jaewan234" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.scanner.scanAll=false /d:sonar.coverage.exclusions="**/*Tests.cs" /d:sonar.scanner.skipJreProvisioning=true
        dotnet build --configuration Release
        dotnet test --configuration Release --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        
  create_release:
    runs-on: ubuntu-latest
    needs: [build, sonarcloud]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  generate_docs:
    runs-on: ubuntu-latest
    needs: build 
    permissions:
      contents: write 
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Doxygen 
      run: sudo apt-get install doxygen -y
    
    - name: Generate Documentation 
      run: |
        doxygen Doxyfile
        if [ ! -f docs/index.html ]; then 
          echo '<meta http-equiv="refresh" content="0; url=./html/index.html">' > docs/index.html 
        fi
    
    - name: Deploy to GitHub Pages 
      uses: peaceiris/actions-gh-pages@v3 
      with: 
        github_token: ${{ secrets.GITHUB_TOKEN }} 
        publish_dir: ./docs 
